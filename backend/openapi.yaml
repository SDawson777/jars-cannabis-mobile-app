openapi: 3.0.3
info:
  title: JARS Cannabis Mobile App API
  description: API for the JARS cannabis mobile application
  version: 1.0.0
  contact:
    name: JARS API Support
    url: https://jars.app/support
    email: api-support@jars.app
  license:
    name: Proprietary
    url: https://jars.app/terms

servers:
  - url: https://api.jars.app/api/v1
    description: Production server
  - url: https://staging-api.jars.app/api/v1
    description: Staging server
  - url: http://localhost:3000/api/v1
    description: Local development server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        dateOfBirth:
          type: string
          format: date

    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        category:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        imageUrl:
          type: string
          format: uri
        featured:
          type: boolean
        thcContent:
          type: number
          format: float
        cbdContent:
          type: number
          format: float

    CartItem:
      type: object
      properties:
        id:
          type: string
        productId:
          type: string
        quantity:
          type: integer
          minimum: 1
        variant:
          type: string
        product:
          $ref: '#/components/schemas/Product'

    Cart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total:
          type: number
          format: float
        itemCount:
          type: integer
        coupon:
          type: object
          properties:
            code:
              type: string
            discount:
              type: number
              format: float

    Order:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [pending, confirmed, preparing, delivering, delivered, cancelled]
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total:
          type: number
          format: float
        deliveryMethod:
          type: string
          enum: [delivery, pickup]
        deliveryAddress:
          type: object
        estimatedDelivery:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    Store:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        phone:
          type: string
        hours:
          type: object

    Review:
      type: object
      properties:
        id:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        recommend:
          type: boolean
        userId:
          type: string
        productId:
          type: string
        createdAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      tags:
        - Products
      summary: List products with optional filters
      security: []
      parameters:
        - name: category
          in: query
          description: Filter by product category
          schema:
            type: string
        - name: search
          in: query
          description: Search products by name
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price filter
          schema:
            type: number
            format: float
        - name: maxPrice
          in: query
          description: Maximum price filter
          schema:
            type: number
            format: float
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: '#/components/schemas/Product'
                  relatedProducts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart:
    get:
      tags:
        - Shopping Cart
      summary: Get cart contents
      responses:
        '200':
          description: Cart contents
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Shopping Cart
      summary: Clear cart
      responses:
        '200':
          description: Cart cleared
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cart:
                    $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart/items:
    post:
      tags:
        - Shopping Cart
      summary: Add item to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                  minimum: 1
                variant:
                  type: string
      responses:
        '201':
          description: Item added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    $ref: '#/components/schemas/CartItem'
                  cart:
                    $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart/items/{itemId}:
    put:
      tags:
        - Shopping Cart
      summary: Update cart item quantity
      parameters:
        - name: itemId
          in: path
          required: true
          description: Cart item ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: Cart item updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    $ref: '#/components/schemas/CartItem'
                  cart:
                    $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Shopping Cart
      summary: Remove item from cart
      parameters:
        - name: itemId
          in: path
          required: true
          description: Cart item ID
          schema:
            type: string
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cart:
                    $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      tags:
        - Orders
      summary: List user orders
      parameters:
        - name: status
          in: query
          description: Filter orders by status
          schema:
            type: string
            enum: [pending, confirmed, preparing, delivering, delivered, cancelled]
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: List of user orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Orders
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - deliveryMethod
              properties:
                deliveryMethod:
                  type: string
                  enum: [delivery, pickup]
                deliveryAddress:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
                paymentMethod:
                  type: string
                  enum: [card, cash]
                paymentDetails:
                  type: object
                tip:
                  type: number
                  format: float
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order details
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stores:
    get:
      tags:
        - Stores
      summary: List stores
      security: []
      responses:
        '200':
          description: List of stores
          content:
            application/json:
              schema:
                type: object
                properties:
                  stores:
                    type: array
                    items:
                      $ref: '#/components/schemas/Store'

  /stores/{id}:
    get:
      tags:
        - Stores
      summary: Get store details
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Store ID
          schema:
            type: string
      responses:
        '200':
          description: Store details
          content:
            application/json:
              schema:
                type: object
                properties:
                  store:
                    $ref: '#/components/schemas/Store'
        '404':
          description: Store not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Products
    description: Product catalog and details
  - name: Shopping Cart
    description: Shopping cart management
  - name: Orders
    description: Order management and tracking
  - name: Stores
    description: Store information and locations