name: E2E Smoke Tests (Detox)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  e2e-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      NODE_OPTIONS: '--max-old-space-size=4096'

    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4

      - name: üîç Preflight - Verify lockfiles exist
        run: |
          test -f npm-shrinkwrap.json || (echo "‚ùå Missing root npm-shrinkwrap.json"; exit 1)
          test -f backend/package-lock.json || (echo "‚ùå Missing backend/package-lock.json"; exit 1)
          echo "‚úÖ All required lockfiles present"

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: npm
          cache-dependency-path: |
            npm-shrinkwrap.json
            backend/package-lock.json

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üèó Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Ô∏è Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
            ${{ env.ANDROID_HOME }}/system-images/*
            ${{ env.ANDROID_HOME }}/platforms/*
            ${{ env.ANDROID_HOME }}/platform-tools/*
            ${{ env.ANDROID_HOME }}/build-tools/*
          key: android-sdk-${{ runner.os }}-api-34
          restore-keys: |
            android-sdk-${{ runner.os }}-

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîê Verify Expo token
        run: test -n "${{ secrets.EXPO_TOKEN }}" || (echo "‚ùå Missing EXPO_TOKEN secret"; exit 1)

      - name: üèó Setup Expo & EAS (npm-only)
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          packager: npm

      - name: üß∞ Cache Android SDK (tools + images)
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ANDROID_HOME }}/platforms
            ${{ env.ANDROID_HOME }}/build-tools
            ${{ env.ANDROID_HOME }}/emulator
            ${{ env.ANDROID_HOME }}/platform-tools
            ${{ env.ANDROID_HOME }}/system-images
          key: android-sdk-${{ runner.os }}-api34-ga-arm64-${{ hashFiles('e2e-smoke.yml') }}
          restore-keys: |
            android-sdk-${{ runner.os }}-api34-ga-arm64-

      - name: Android SDK setup (ARM image)
        shell: bash
        run: |
          set -euo pipefail

          "${ANDROID_HOME}/cmdline-tools/bin/sdkmanager" "cmdline-tools;latest" || true
          export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${PATH}"

          (set +o pipefail; yes | sdkmanager --licenses >/dev/null) || true

          sdkmanager --install \
            "platform-tools" \
            "emulator" \
            "platforms;android-34" \
            "system-images;android-34;google_apis;arm64-v8a"

          sdkmanager --list | grep -E "android-34|arm64-v8a|google_apis" || true

      - name: ‚ö° Cache Android AVD directory
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.android/avd
          key: avd-${{ runner.os }}-android34-${{ hashFiles('**/e2e-smoke.yml') }}
          restore-keys: |
            avd-${{ runner.os }}-android34-

      - name: Create / verify AVD (ARM)
        shell: bash
        env:
          AVD_NAME: Pixel_XL_API_34
        run: |
          set -euo pipefail
          export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${PATH}"
          export ANDROID_AVD_HOME="$HOME/.android/avd"

          mkdir -p "${ANDROID_AVD_HOME}"

          avdmanager delete avd --name "${AVD_NAME}" || true

          # Create AVD using a smaller device profile for quicker boot (Nexus 5)
          echo "no" | avdmanager create avd \
            --force \
            --name "${AVD_NAME}" \
            --package "system-images;android-34;google_apis;arm64-v8a" \
            --tag "google_apis" \
            --abi "arm64-v8a" \
            --device "Nexus 5"

          test -f "${ANDROID_AVD_HOME}/${AVD_NAME}.ini" || (echo "‚ùå Failed to create AVD ${AVD_NAME}"; exit 1)
          echo "INI:"
          grep -E "abi.type|image.sysdir.1" "${ANDROID_AVD_HOME}/${AVD_NAME}.ini" || true
          echo "AVDs:"
          avdmanager list avd || true

          # Nudge config for stable software rendering and faster boot
          AVD_DIR="$ANDROID_AVD_HOME/${AVD_NAME}.avd"
          {
            echo "hw.accel=off"
            echo "hw.gpu.enabled=yes"
            echo "hw.gpu.mode=swiftshader_indirect"
            echo "disk.dataPartition.size=2048M"
          } >> "${AVD_DIR}/config.ini"

      - name: Boot emulator (ARM, software GPU)
        shell: bash
        env:
          AVD_NAME: Pixel_XL_API_34
        run: |
          set -euo pipefail

          "${ANDROID_HOME}/emulator/emulator" -avd "${AVD_NAME}" \
            -no-window \
            -no-snapshot \
            -gpu swiftshader_indirect \
            -no-audio \
            -no-boot-anim \
            -no-metrics \
            -camera-back none \
            -camera-front none \
            -selinux permissive \
            -qemu -m 3072 > emulator.log 2>&1 &

          # Wait for ADB
          "${ANDROID_HOME}/platform-tools/adb" wait-for-device

          # Robust boot wait (up to ~12 minutes)
          deadline=$((SECONDS + 720)) # 12 minutes
          until "${ANDROID_HOME}/platform-tools/adb" shell getprop sys.boot_completed 2>/dev/null | tr -d '\r' | grep -q '^1$'; do
            if (( SECONDS > deadline )); then
              echo "‚ùå Emulator did not finish booting within 12 minutes"
              echo "== tail emulator.log =="
              tail -n 200 emulator.log || true
              exit 1
            fi
            echo "‚Ä¶waiting for Android to boot ($((${deadline}-SECONDS))s left)"
            sleep 10
          done

          "${ANDROID_HOME}/platform-tools/adb" shell input keyevent 82 || true
          "${ANDROID_HOME}/platform-tools/adb" devices
      - name: üåê Expo Web export test
        run: CI=1 npx expo export --platform web || echo "‚ö†Ô∏è  Web export not available in this Expo configuration"

      - name: üèó Build app for E2E
        run: |
          npm run build:e2e:android
        env:
          EXPO_PUBLIC_API_BASE_URL: http://10.0.2.2:3000/api/v1
          CI: true

      - name: üöÄ Start backend server
        run: |
          npm ci
          npm start &
          # Wait for server to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000/api/v1/health; do sleep 1; done'
        working-directory: backend
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-secret-key
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
          FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 || '' }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID || 'test-project' }}

      - name: üß™ Run Detox E2E tests
        run: npm run test:e2e:android
        env:
          DETOX_CONFIGURATION: android.emu.debug
          EXPO_PUBLIC_API_BASE_URL: http://10.0.2.2:3000/api/v1

      - name: üì± Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: detox-artifacts
          path: |
            artifacts/
            e2e/screenshots/
            e2e/videos/

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e/test-results/
            coverage/
