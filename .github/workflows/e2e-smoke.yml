name: e2e-smoke
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_OPTIONS: --max-old-space-size=4096

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v4

      - name: Use Node from .nvmrc and cache npm
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: |
            npm-shrinkwrap.json
            backend/package-lock.json

      - name: Ensure lockfiles exist
        run: |
          test -f npm-shrinkwrap.json || (echo "Missing root npm-shrinkwrap.json"; exit 1)
          test -f backend/package-lock.json || (echo "Missing backend/package-lock.json"; exit 1)

      - name: Install deps (root)
        run: npm ci

      - name: Install deps (backend)
        run: npm ci
        working-directory: backend

      # Build APK with EAS
      - name: Expo/EAS auth (npm only)
        uses: expo/expo-github-action@v8
        with:
          token: ${{ secrets.EXPO_TOKEN }}
          packager: npm
          expo-version: latest
          eas-version: latest
          expo-cache: true
          eas-cache: true
          patch-watchers: true

      - name: Create Android credentials.json (local keystore)
        env:
          EXPO_ANDROID_KEYSTORE_BASE64: ${{ secrets.EXPO_ANDROID_KEYSTORE_BASE64 }}
          EXPO_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.EXPO_ANDROID_KEYSTORE_PASSWORD }}
          EXPO_ANDROID_KEY_ALIAS: ${{ secrets.EXPO_ANDROID_KEY_ALIAS }}
          EXPO_ANDROID_KEY_PASSWORD: ${{ secrets.EXPO_ANDROID_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "$EXPO_ANDROID_KEYSTORE_BASE64" ]; then
            echo "::warning::EXPO_ANDROID_KEYSTORE_BASE64 not set; skipping credentials.json creation"
            echo "EAS will attempt to use remote credentials or fail if none available"
            exit 0
          fi
          echo "$EXPO_ANDROID_KEYSTORE_BASE64" | base64 -d > android.keystore
          cat > credentials.json <<EOF
          {
            "android": {
              "keystore": {
                "keystorePath": "android.keystore",
                "keystorePassword": "${EXPO_ANDROID_KEYSTORE_PASSWORD}",
                "keyAlias": "${EXPO_ANDROID_KEY_ALIAS}",
                "keyPassword": "${EXPO_ANDROID_KEY_PASSWORD}"
              }
            }
          }
          EOF
          echo "✅ Created credentials.json with local keystore"

      - name: Build Android APK (EAS)
        run: |
          set -euo pipefail
          eas build -p android --profile android-preview --non-interactive --json > build.json
          cat build.json

      - name: Download APK artifact
        run: |
          set -euo pipefail
          URL=$(jq -r '.[0].artifacts.buildUrl // .artifacts.buildUrl' build.json)
          test -n "$URL" || (echo "No buildUrl in build.json"; cat build.json; exit 1)
          curl -L "$URL" -o app-release.apk
          ls -lh app-release.apk

      # Upload to Appetize (demo link)
      - name: Upload APK to Appetize (action removed)
        # The appetizeio/appetize-github-action repository is not available; use the API fallback step below instead.
        run: |
          echo "Note: appetizeio/appetize-github-action is not available. Using API upload step to Appetize instead."

      - name: Upload APK to Appetize (API fallback)
        # Don't reference secrets in the conditional; check at runtime and skip if missing
        if: ${{ github.event.pull_request == null || github.event.pull_request.head.repo.fork == false }}
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.APPETIZE_API_TOKEN }}" ]; then
            echo "APPETIZE_API_TOKEN not set; skipping API fallback upload"
            exit 0
          fi
          RESPONSE=$(curl -sS https://api.appetize.io/v1/apps \
            -u "${{ secrets.APPETIZE_API_TOKEN }}:" \
            -F "file=@app-release.apk" \
            -F "platform=android")
          PUB=$(echo "$RESPONSE" | jq -r '.publicKey // .data.publicKey // .app.publicKey // empty')
          echo "PUBLIC_KEY=$PUB" >> $GITHUB_ENV
          echo "### Appetize Demo" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Dashboard:** https://appetize.io/app/$PUB" >> $GITHUB_STEP_SUMMARY
          echo "- **Embed:** https://appetize.io/embed/$PUB?device=pixel7&osVersion=14.0&scale=75&autoplay=true" >> $GITHUB_STEP_SUMMARY

      - name: Appetize links
        if: ${{ github.event.pull_request == null || github.event.pull_request.head.repo.fork == false }}
        run: |
          # Prefer an explicit APPETIZE_PUBLIC_KEY secret (stable), otherwise use PUBLIC_KEY set by API upload
          PUB="${{ secrets.APPETIZE_PUBLIC_KEY || '' }}"
          if [ -z "$PUB" ]; then
            PUB="$PUBLIC_KEY"
          fi
          if [ -n "$PUB" ]; then
            echo "### Appetize Demo" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Dashboard:** https://appetize.io/app/$PUB" >> $GITHUB_STEP_SUMMARY
            echo "- **Embed:** https://appetize.io/embed/$PUB?device=pixel7&osVersion=14.0&scale=75&autoplay=true" >> $GITHUB_STEP_SUMMARY
          else
            echo "No Appetize public key available; upload may have failed or been skipped." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Typecheck & lint (root)
        run: |
          npm run typecheck
          npm run lint

      - name: Typecheck & lint (backend)
        run: |
          npm run typecheck || true
          npm run lint || true
        working-directory: backend

      - name: Firebase Test Lab Robo smoke
        # Do a runtime check for GCP secrets to avoid using secrets in the workflow expression
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.GCP_PROJECT_ID }}" ] || [ -z "${{ secrets.GCP_SA_KEY_JSON }}" ]; then
            echo "GCP_PROJECT_ID or GCP_SA_KEY_JSON not set; skipping Firebase Test Lab run"
            exit 0
          fi
          echo "${{ secrets.GCP_SA_KEY_JSON }}" > /tmp/gcloud_key.json
          gcloud auth activate-service-account --key-file=/tmp/gcloud_key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud firebase test android run \
            --type robo \
            --app app-release.apk \
            --device model=MediumPhone.arm,version=34,locale=en,orientation=portrait \
            --timeout 5m

      # Emulator fallback when FTL secrets are not present
      - name: Install Android SDK & tools (for emulator fallback)
        # This step will check at runtime whether GCP secrets are present; if they are, it will skip.
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.GCP_PROJECT_ID }}" ] && [ -n "${{ secrets.GCP_SA_KEY_JSON }}" ]; then
            echo "GCP secrets present; skipping emulator fallback SDK install"
            exit 0
          fi
          sudo mkdir -p /usr/lib/android-sdk || true
          sudo chown -R $USER:$(id -gn) /usr/lib/android-sdk || true
          export ANDROID_SDK_ROOT="/usr/lib/android-sdk"
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk unzip
          curl -sS https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline.zip
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          unzip -q cmdline.zip -d /tmp
          mv /tmp/cmdline-tools "$ANDROID_SDK_ROOT/cmdline-tools/latest" || true
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-34" "system-images;android-34;google_apis;arm64-v8a" "emulator"
        env:
          ADB_INSTALL_TIMEOUT: 120000

      - name: Create and configure AVD (fallback)
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.GCP_PROJECT_ID }}" ] && [ -n "${{ secrets.GCP_SA_KEY_JSON }}" ]; then
            echo "GCP secrets present; skipping AVD creation"
            exit 0
          fi
          export ANDROID_AVD_HOME="$HOME/.android/avd"
          mkdir -p "${ANDROID_AVD_HOME}"
          AVD_NAME="ci_arm64_avd"
          export AVD_NAME
          echo "no" | avdmanager create avd --force --name "${AVD_NAME}" --package "system-images;android-34;google_apis;arm64-v8a" --tag "google_apis" --abi "arm64-v8a" --device "Nexus 5"
          AVD_DIR="$ANDROID_AVD_HOME/${AVD_NAME}.avd"
          {
            echo "hw.accel=off"
            echo "hw.gpu.enabled=yes"
            echo "hw.gpu.mode=swiftshader_indirect"
            echo "disk.dataPartition.size=2048M"
          } >> "${AVD_DIR}/config.ini"

      - name: Boot emulator (fallback)
        shell: bash
        env:
          AVD_NAME: ci_arm64_avd
          ANDROID_HOME: /usr/lib/android-sdk
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.GCP_PROJECT_ID }}" ] && [ -n "${{ secrets.GCP_SA_KEY_JSON }}" ]; then
            echo "GCP secrets present; skipping emulator boot"
            exit 0
          fi
          "${ANDROID_HOME}/emulator/emulator" -avd "${AVD_NAME}" -no-window -no-snapshot -gpu swiftshader_indirect -no-audio -no-boot-anim -no-metrics -camera-back none -camera-front none -selinux permissive -qemu -m 3072 > emulator.log 2>&1 &
          "${ANDROID_HOME}/platform-tools/adb" wait-for-device
          deadline=$((SECONDS + 720))
          until "${ANDROID_HOME}/platform-tools/adb" shell getprop sys.boot_completed 2>/dev/null | tr -d '\r' | grep -q '^1$'; do
            if (( SECONDS > deadline )); then
              echo "❌ Emulator did not finish booting within 12 minutes"
              tail -n 200 emulator.log || true
              exit 1
            fi
            echo "…waiting for Android to boot ($((${deadline}-SECONDS))s left)"
            sleep 10
          done
          "${ANDROID_HOME}/platform-tools/adb" shell input keyevent 82 || true
          "${ANDROID_HOME}/platform-tools/adb" devices

      - name: 🌐 Expo Web export test
        run: CI=1 npx expo export --platform web || echo "⚠️  Web export not available in this Expo configuration"

      - name: 🏗 Build app for E2E
        run: npm run build:e2e:android
        env:
          EXPO_PUBLIC_API_BASE_URL: http://10.0.2.2:3000/api/v1
          CI: true

      - name: 🚀 Start backend server
        run: |
          npm ci
          npm start &
          timeout 30 bash -c 'until curl -f http://localhost:3000/api/v1/health; do sleep 1; done'
        working-directory: backend
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-secret-key
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
          FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 || '' }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID || 'test-project' }}

      - name: 🧪 Run Detox E2E tests
        run: npm run test:e2e:android
        env:
          DETOX_CONFIGURATION: android.emu.debug
          EXPO_PUBLIC_API_BASE_URL: http://10.0.2.2:3000/api/v1

      - name: 📱 Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: detox-artifacts
          path: |
            artifacts/
            e2e/screenshots/
            e2e/videos/

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e/test-results/
            coverage/
