name: E2E Smoke Tests (Detox)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  e2e-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      NODE_OPTIONS: '--max-old-space-size=4096'

    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4

      - name: üîç Preflight - Verify lockfiles exist
        run: |
          test -f npm-shrinkwrap.json || (echo "‚ùå Missing root npm-shrinkwrap.json"; exit 1)
          test -f backend/package-lock.json || (echo "‚ùå Missing backend/package-lock.json"; exit 1)
          echo "‚úÖ All required lockfiles present"

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: npm
          cache-dependency-path: |
            npm-shrinkwrap.json
            backend/package-lock.json

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üèó Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Ô∏è Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
            ${{ env.ANDROID_HOME }}/system-images/*
            ${{ env.ANDROID_HOME }}/platforms/*
            ${{ env.ANDROID_HOME }}/platform-tools/*
            ${{ env.ANDROID_HOME }}/build-tools/*
          key: android-sdk-${{ runner.os }}-api-34
          restore-keys: |
            android-sdk-${{ runner.os }}-

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîê Verify Expo token
        run: test -n "${{ secrets.EXPO_TOKEN }}" || (echo "‚ùå Missing EXPO_TOKEN secret"; exit 1)

      - name: üèó Setup Expo & EAS (npm-only)
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          packager: npm

      - name: üõ†Ô∏è Install modern Android cmdline-tools (schema v4 aware)
        run: |
          set -euo pipefail
          # Install latest cmdline-tools using the legacy bootstrap if needed
          "${ANDROID_HOME}/cmdline-tools/bin/sdkmanager" "cmdline-tools;latest" || true

          AVD_NAME="Pixel_XL_API_34"
          # Use the newly installed 'latest' for all subsequent commands

          export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${PATH}"

          # Show versions for diagnostics
          sdkmanager --version || true
          avdmanager --help 2>&1 | head -n 1 || true

          # Accept licenses robustly (avoid failing on SIGPIPE from `yes`) and make sure required packages are present
          # Mask pipefail for the single line that uses `yes` so a closed pipe doesn't fail the job.
          (set +o pipefail; yes | sdkmanager --licenses >/dev/null) || true

          # Install required packages without piping `yes` ‚Äî installs should be non-interactive once licenses are accepted
          sdkmanager --install \
            "platform-tools" \
            "emulator" \
            "platforms;android-34" \
            "system-images;android-34;google_apis;arm64-v8a"

      - name: ü§ñ Create / verify AVD (Pixel_XL_API_34)
        env:
          AVD_NAME: Pixel_XL_API_34
          ANDROID_AVD_HOME: ${{ env.HOME }}/.android/avd
        run: |
          set -euo pipefail
          export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${PATH}"
          export ANDROID_AVD_HOME="${HOME}/.android/avd"

          # Ensure AVD home exists
          mkdir -p "$ANDROID_AVD_HOME"

          # Clean up any stale AVD entry
          avdmanager delete avd --name "${AVD_NAME}" || true

          # Create with schema-v4 aware avdmanager. Reply 'no' to hardware profile prompt.
          echo "no" | avdmanager create avd \
            --force \
            --name "${AVD_NAME}" \
            --package "system-images;android-34;google_apis;arm64-v8a" \
            --tag "google_apis" \
            --abi "arm64-v8a" \
            --device "pixel_xl"

          # Verify created AVD exists and fail-fast if not
          if [ ! -f "$ANDROID_AVD_HOME/${AVD_NAME}.ini" ]; then
            echo "AVD ini missing: $ANDROID_AVD_HOME/${AVD_NAME}.ini"
            ls -la "$ANDROID_AVD_HOME"
            avdmanager list avd || true
            exit 1
          fi

          # Diagnostics
          ls -la "$ANDROID_AVD_HOME"
          avdmanager list avd || true
          # Verify AVD ini content for ABI and image path
          echo "--- AVD ini content ---"
          grep -E "^abi.type=|^image.sysdir.1=" "$ANDROID_AVD_HOME/${AVD_NAME}.ini" || true
          # Confirm sdkmanager installed the ARM image
          sdkmanager --list | sed -n '1,200p' | grep -E "android-34" -n || true
          sdkmanager --list | grep "arm64-v8a" || true

      - name: ü§ñ Start Android emulator
        env:
          AVD_NAME: Pixel_XL_API_34
          ANDROID_AVD_HOME: ${{ env.HOME }}/.android/avd
        run: |
          # Boot ARM AVD with software GPU and no window. Avoid -accel flags for ARM.
          "${ANDROID_HOME}/emulator/emulator" -avd "${AVD_NAME}" \
            -gpu swiftshader_indirect -no-window -no-snapshot -no-boot-anim -no-audio -no-metrics -selinux permissive -qemu -m 2048 &

          # Diagnostics while emulator starts
          "${ANDROID_HOME}/platform-tools/adb" wait-for-device shell \
            'while [[ -z $(getprop sys.boot_completed | tr -d "\r") ]]; do sleep 1; done; input keyevent 82'
          echo "Emulator boot completed"
          "${ANDROID_HOME}/platform-tools/adb" devices || true
      - name: üåê Expo Web export test
        run: CI=1 npx expo export --platform web || echo "‚ö†Ô∏è  Web export not available in this Expo configuration"

      - name: üèó Build app for E2E
        run: |
          npm run build:e2e:android
        env:
          EXPO_PUBLIC_API_BASE_URL: http://10.0.2.2:3000/api/v1
          CI: true

      - name: üöÄ Start backend server
        run: |
          npm ci
          npm start &
          # Wait for server to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000/api/v1/health; do sleep 1; done'
        working-directory: backend
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-secret-key
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
          FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 || '' }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID || 'test-project' }}

      - name: üß™ Run Detox E2E tests
        run: npm run test:e2e:android
        env:
          DETOX_CONFIGURATION: android.emu.debug
          EXPO_PUBLIC_API_BASE_URL: http://10.0.2.2:3000/api/v1

      - name: üì± Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: detox-artifacts
          path: |
            artifacts/
            e2e/screenshots/
            e2e/videos/

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e/test-results/
            coverage/
