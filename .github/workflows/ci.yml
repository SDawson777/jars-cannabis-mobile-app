name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max-old-space-size=4096'
    steps:
      - uses: actions/checkout@v4

      - name: 🔍 Preflight - Verify lockfiles exist
        run: |
          test -f npm-shrinkwrap.json || (echo "❌ Missing root npm-shrinkwrap.json"; exit 1)
          test -f backend/package-lock.json || (echo "❌ Missing backend/package-lock.json"; exit 1)
          echo "✅ All required lockfiles present"

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: |
            npm-shrinkwrap.json
            backend/package-lock.json

      - name: 📦 Cache npm (root)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-root-${{ hashFiles('npm-shrinkwrap.json') }}
          restore-keys: |
            npm-cache-root-

      - name: 📦 Cache npm (backend)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            npm-cache-backend-

      - name: 🔧 Install deps (root)
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Format Check
        run: npm run format:ci
      - name: Typecheck
        run: npm run typecheck
      - name: Unit & Integration Tests (frontend)
        run: npm run test:ci

      - name: 🔧 Install deps (backend)
        run: npm ci
        working-directory: backend

      - name: Backend Lint
        run: npm run lint
        working-directory: backend

      - name: Backend Typecheck
        run: npm run typecheck
        working-directory: backend

      - name: Backend Tests
        run: npm run test:ci
        working-directory: backend
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          # For tests we prefer long-enough JWT secret (some validators require >=32 chars)
          JWT_SECRET: test-jwt-secret-at-least-32-characters-long
          FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 || 'dGVzdC1zZXJ2aWNlLWFjY291bnQ=' }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID || 'test-project' }}
          # Add test defaults for external API keys used by the backend env schema
          STRIPE_SECRET_KEY: sk_test_test
          OPENAI_API_KEY: test-openai-key
          OPENWEATHER_API_KEY: test-weather-key

      - name: 🌐 Expo Web Export Test (non-blocking)
        run: CI=1 npx expo export --platform web || echo "⚠️  Web export not available in this Expo configuration"

      - name: Bake AVD config (software-only)
        if: runner.os == 'Linux'
        env:
          AVD_NAME: Pixel_XL_API_34
        run: |
          set -euo pipefail
          AVD_DIR="$HOME/.android/avd/${AVD_NAME}.avd"
          if [ -d "$AVD_DIR" ]; then
            echo "Applying software-emulation defaults to $AVD_DIR/config.ini"
            mkdir -p "$(dirname "$AVD_DIR/config.ini")"
            # Append settings to favor software emulation (safe fallback)
            echo "hw.accel=off" >> "$AVD_DIR/config.ini" || true
            echo "hw.gpu.mode=swiftshader_indirect" >> "$AVD_DIR/config.ini" || true
            echo "hw.gpu.enabled=yes" >> "$AVD_DIR/config.ini" || true
          else
            echo "AVD directory $AVD_DIR not found; skipping bake step"
          fi

      - name: Create AVD if missing
        if: runner.os == 'Linux'
        env:
          AVD_NAME: Pixel_XL_API_34
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        run: |
          set -euo pipefail
          echo "Ensure required SDK components for AVD creation"
          yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          # Install system image if missing
          "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" "system-images;android-34;google_apis;x86_64" || true
          AVD_DIR="$HOME/.android/avd/${AVD_NAME}.avd"
          if [ -d "$AVD_DIR" ]; then
            echo "AVD already exists at $AVD_DIR"
          else
            echo "Creating AVD $AVD_NAME"
            echo "no" | "$ANDROID_HOME/cmdline-tools/latest/bin/avdmanager" create avd -n "${AVD_NAME}" -k "system-images;android-34;google_apis;x86_64" -d "pixel_xl" || true
          fi

      - name: Boot emulator (software)
        if: runner.os == 'Linux'
        env:
          AVD_NAME: Pixel_XL_API_34
        run: |
          set -euo pipefail
          echo "Starting Android emulator (software) $AVD_NAME"
          "${ANDROID_HOME}/emulator/emulator" -avd "${AVD_NAME}" \
            -no-window \
            -no-snapshot \
            -accel off \
            -gpu swiftshader_indirect \
            -no-audio \
            -no-boot-anim \
            -camera-back none \
            -camera-front none \
            -no-metrics \
            -qt-hide-window \
            -selinux permissive \
            -qemu -m 3072 &
          "${ANDROID_HOME}/platform-tools/adb" wait-for-device shell \
            'while [[ -z $(getprop sys.boot_completed | tr -d "\r") ]]; do sleep 1; done; input keyevent 82'

      - name: Audit (no fail on warn)
        run: npm audit --production --audit-level=high || true
