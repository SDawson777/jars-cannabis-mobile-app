name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max-old-space-size=4096'
    name: CI

    on:
      push:
        branches: [main]
      pull_request:
        branches: [main]

    jobs:
      build-test:
        runs-on: ubuntu-latest
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        steps:
          - uses: actions/checkout@v4

          - name: 🔍 Preflight - Verify lockfiles exist
            run: |
              test -f npm-shrinkwrap.json || (echo "❌ Missing root npm-shrinkwrap.json"; exit 1)
              test -f backend/package-lock.json || (echo "❌ Missing backend/package-lock.json"; exit 1)
              echo "✅ All required lockfiles present"

          - uses: actions/setup-node@v4
            with:
              node-version-file: '.nvmrc'
              cache: 'npm'
              cache-dependency-path: |
                npm-shrinkwrap.json
                backend/package-lock.json

          - name: 📦 Cache npm (root)
            uses: actions/cache@v4
            with:
              path: ~/.npm
              key: npm-cache-root-${{ hashFiles('npm-shrinkwrap.json') }}
              restore-keys: |
                npm-cache-root-

          - name: 📦 Cache npm (backend)
            uses: actions/cache@v4
            with:
              path: ~/.npm
              key: npm-cache-backend-${{ hashFiles('backend/package-lock.json') }}
              restore-keys: |
                npm-cache-backend-

          - name: Install deps (root)
            run: npm ci

          - name: Install deps (backend)
            run: npm ci
            working-directory: backend

          - name: Typecheck & lint (root)
            run: |
              npm run typecheck
              npm run lint

          - name: Typecheck & lint (backend)
            run: |
              npm run typecheck || true
              npm run lint || true
            working-directory: backend

          # Expo/EAS authenticated and npm-only
          - name: Expo/EAS auth
            uses: expo/expo-github-action@v8
            with:
              expo-version: latest
              eas-version: latest
              token: ${{ secrets.EXPO_TOKEN }}
              packager: npm

          - name: Build Android APK (EAS)
            run: eas build -p android --profile apk --non-interactive --json > build.json

          - name: Download APK artifact
            run: |
              URL=$(jq -r '.[0].artifacts.buildUrl // .artifacts.buildUrl' build.json)
              test -n "$URL" || (echo "No buildUrl in build.json"; cat build.json; exit 1)
              curl -L "$URL" -o app-release.apk
              ls -lh app-release.apk

          # Firebase Test Lab Robo smoke (free quota)
          - name: Setup gcloud
            if: ${{ secrets.GC_PROJECT_ID && secrets.GCP_SA_KEY_JSON }}
            uses: google-github-actions/setup-gcloud@v2
            with:
              project_id: ${{ secrets.GC_PROJECT_ID }}
              service_account_key: ${{ secrets.GCP_SA_KEY_JSON }}

          - name: Firebase Test Lab Robo
            if: ${{ secrets.GC_PROJECT_ID && secrets.GCP_SA_KEY_JSON }}
            run: |
              gcloud firebase test android run \
                --type robo \
                --app app-release.apk \
                --device model=MediumPhone.arm,version=34,locale=en,orientation=portrait \
                --timeout 5m

          # Optional: Expo Web export (non-blocking initially)
          - name: Expo Web export (non-blocking)
            continue-on-error: true
            run: npx expo export --platform web --non-interactive

          # Optional: Appetize upload for demo
          - name: Upload to Appetize (optional)
            if: ${{ secrets.APPETIZE_API_TOKEN }}
            env:
              APPETIZE_API_TOKEN: ${{ secrets.APPETIZE_API_TOKEN }}
              APPETIZE_PUBLIC_KEY: ${{ secrets.APPETIZE_PUBLIC_KEY }}
            run: |
              set -euo pipefail
              if [ -n "${APPETIZE_PUBLIC_KEY:-}" ]; then
                curl -sS https://api.appetize.io/v1/apps/${APPETIZE_PUBLIC_KEY} \
                  -u "$APPETIZE_API_TOKEN:" \
                  -F "file=@app-release.apk" \
                  -F "platform=android" | tee appetize.json
              else
                curl -sS https://api.appetize.io/v1/apps \
                  -u "$APPETIZE_API_TOKEN:" \
                  -F "file=@app-release.apk" \
                  -F "platform=android" | tee appetize.json
              fi
              PUB=$(jq -r '.publicKey // .data.publicKey // .app.publicKey' appetize.json)
              echo "Appetize public key: $PUB"
              echo "Embed: https://appetize.io/embed/${PUB}?device=pixel7&osVersion=14.0&scale=75&autoplay=true"

          # Upload test artifacts on failure
          - name: 📱 Upload test artifacts
            uses: actions/upload-artifact@v4
            if: failure()
            with:
              name: artifacts
              path: |
                artifacts/
                e2e/screenshots/
                e2e/videos/

          - name: 📊 Upload test results
            uses: actions/upload-artifact@v4
            if: always()
            with:
              name: test-results
              path: |
                e2e/test-results/
                coverage/

    # TODO: actionable checklist (kept as comments to avoid YAML parsing issues)
    #  - Ensure lockfiles exist: npm-shrinkwrap.json and backend/package-lock.json
    #  - Ensure EXPO_TOKEN, GC_PROJECT_ID, and GCP_SA_KEY_JSON are set in repo secrets for EAS+FTL
    #  - Local verification commands: npm ci; npx tsc -p tsconfig.json; npm run lint; npm run test:ci
    steps:
