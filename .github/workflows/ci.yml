name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack (Yarn) and activate Yarn 3
        run: |
          corepack enable || true
          corepack prepare yarn@3.6.1 --activate || true
      - name: Use Node 20.19.4
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: 'yarn'
          cache-dependency-path: yarn.lock
      - name: Print Node & Yarn versions
        run: |
          echo "Runner versions"
          node --version || true
          yarn --version || true
      - name: Ensure only Yarn is used
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo '‚ùå Detected npm lockfile. Project is Yarn-only.'; exit 1;
          fi
          if [ ! -f yarn.lock ]; then
            echo '‚ùå Missing yarn.lock. Cannot guarantee reproducible installs.'; exit 1;
          fi
          echo '‚úÖ Yarn lockfile verified.'
      - name: Install dependencies (Yarn)
        run: yarn install --immutable
      - name: Typecheck
        run: yarn typecheck
      - name: Lint
        run: yarn lint
      - name: Prettier formatting check
        run: yarn format:check
      - name: Run tests
        run: yarn test -- --ci --passWithNoTests

  build-android-preview:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      ftl_url: ${{ steps.ftl.outputs.results_url }}
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      GCLOUD_PROJECT_ID: ${{ secrets.GC_PROJECT_ID }}
      GCP_SA_KEY_JSON: ${{ secrets.GCP_SA_KEY_JSON }}
      GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
      EXPO_ANDROID_KEYSTORE_BASE64: ${{ secrets.EXPO_ANDROID_KEYSTORE_BASE64 }}
      EXPO_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.EXPO_ANDROID_KEYSTORE_PASSWORD }}
      EXPO_ANDROID_KEY_ALIAS: ${{ secrets.EXPO_ANDROID_KEY_ALIAS }}
      EXPO_ANDROID_KEY_PASSWORD: ${{ secrets.EXPO_ANDROID_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack (Yarn) and activate Yarn 3
        run: |
          corepack enable || true
          corepack prepare yarn@3.6.1 --activate || true
      - uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: 'yarn'
          cache-dependency-path: yarn.lock
      - name: Print Node & Yarn versions
        run: |
          echo "Runner versions"
          node --version || true
          yarn --version || true
      - name: Install dependencies (Yarn)
        run: yarn install --immutable

      - name: Ensure EAS secret GOOGLE_SERVICES_JSON_BASE64
        if: ${{ env.GOOGLE_SERVICES_JSON_BASE64 != '' }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
          echo "üîê Syncing EAS secret: GOOGLE_SERVICES_JSON_BASE64"
          npx -y eas-cli@latest whoami || true
          EXISTING=$(npx -y eas-cli@latest secret:list --json | jq -r '.[] | select(.name=="GOOGLE_SERVICES_JSON_BASE64" and .scope=="project") | .id' || true)
          if [ -n "$EXISTING" ]; then
            echo "Found existing secret id=$EXISTING. Deleting to update..."
            npx -y eas-cli@latest secret:delete --id "$EXISTING" --non-interactive || true
          fi
          npx -y eas-cli@latest secret:create \
            --non-interactive \
            --name GOOGLE_SERVICES_JSON_BASE64 \
            --value "$GOOGLE_SERVICES_JSON_BASE64" \
            --scope project \
            --type string
          echo "‚úÖ EAS secret synchronized."

      - name: Create Android credentials.json (local keystore)
        if: ${{ env.EXPO_ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          set -euo pipefail
          echo "$EXPO_ANDROID_KEYSTORE_BASE64" | base64 -d > android.keystore
          cat > credentials.json <<'JSON'
          {
            "android": {
              "keystore": {
                "keystorePath": "android.keystore",
                "keystorePassword": "${EXPO_ANDROID_KEYSTORE_PASSWORD}",
                "keyAlias": "${EXPO_ANDROID_KEY_ALIAS}",
                "keyPassword": "${EXPO_ANDROID_KEY_PASSWORD}"
              }
            }
          }
          JSON
          echo "‚úÖ Created credentials.json with local keystore"

      - name: Prebuild native Android project
        run: npx expo prebuild --clean --platform android

      - name: Build Android Preview APK (no store creds)
        run: npx eas-cli@latest build --platform android --profile android-preview --non-interactive --clear-cache

      - name: Download latest EAS Android artifact (APK)
        run: |
          npx eas-cli@latest build:download \
            --latest \
            --platform android \
            --output app-preview.apk
          test -f app-preview.apk

      - name: Upload APK artifact (preserve)
        uses: actions/upload-artifact@v4
        with:
          name: android-preview-apk
          path: app-preview.apk
          if-no-files-found: error

      - name: (Info) Skipping FTL ‚Äî secrets missing or PR is from a fork
        if: ${{ (env.GCLOUD_PROJECT_ID == '' || env.GCP_SA_KEY_JSON == '') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}
        run: |
          echo "Skipping Firebase Test Lab due to missing secrets or forked PR."
          echo "### Firebase Test Lab (Robo) ‚Äî Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Reason: secrets not available or forked PR." >> $GITHUB_STEP_SUMMARY

      - name: Authenticate to Google Cloud
        if: ${{ (env.GCLOUD_PROJECT_ID != '' && env.GCP_SA_KEY_JSON != '') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_SA_KEY_JSON }}

      - name: Set up gcloud SDK
        if: ${{ (env.GCLOUD_PROJECT_ID != '' && env.GCP_SA_KEY_JSON != '') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCLOUD_PROJECT_ID }}

      - name: Run Firebase Test Lab (Robo) on APK
        id: ftl
        if: ${{ (env.GCLOUD_PROJECT_ID != '' && env.GCP_SA_KEY_JSON != '') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        run: |
          set -euo pipefail
          DEVICE="model=Pixel2,version=30,locale=en,orientation=portrait"
          EXIT_CODE=0
          gcloud firebase test android run \
            --type robo \
            --app app-preview.apk \
            --device "$DEVICE" \
            --timeout 900s \
            || EXIT_CODE=$?
          RESULTS_URL=$(grep -Eo 'More details are available at: https://console.developers.google.com/storage/browser/[^ ]+' "$HOME/.config/gcloud/logs/"* 2>/dev/null | tail -n1 | awk '{print $NF}') || true
          echo "results_url=${RESULTS_URL:-}" >> $GITHUB_OUTPUT
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "::error::Firebase Test Lab reported failures. See results: ${RESULTS_URL:-unknown}"
            exit $EXIT_CODE
          fi

      - name: Summarize Firebase Test Lab results
        if: ${{ (env.GCLOUD_PROJECT_ID != '' && env.GCP_SA_KEY_JSON != '') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        run: |
          echo "### Firebase Test Lab (Robo) Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Results: ${{ steps.ftl.outputs.results_url }}" >> $GITHUB_STEP_SUMMARY

  build-ios-simulator:
    needs: test
    runs-on: macos-latest
    outputs:
      appetize_url: ${{ steps.appetize.outputs.url }}
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      APPETIZE_API_TOKEN: ${{ secrets.APPETIZE_API_TOKEN }}
      APPETIZE_PUBLIC: ${{ vars.APPETIZE_PUBLIC }}
      GOOGLESERVICE_PLIST_BASE64: ${{ secrets.GOOGLESERVICE_PLIST_BASE64 }}
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack (Yarn) and activate Yarn 3
        run: |
          corepack enable || true
          corepack prepare yarn@3.6.1 --activate || true
      - uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: 'yarn'
          cache-dependency-path: yarn.lock
      - name: Print Node & Yarn versions
        run: |
          echo "Runner versions"
          node --version || true
          yarn --version || true
      - name: Install dependencies (Yarn)
        run: yarn install --immutable

      - name: Verify iOS Podfile exists (fail early)
        run: |
          if [ ! -f ios/Podfile ]; then
            echo "‚ùå ios/Podfile missing in repository root"
            echo "Repository tree (top-level):"
            ls -la
            echo "\nGit status:"
            git status --porcelain=v1
            exit 1
          fi
          echo "‚úÖ ios/Podfile present"

      - name: Write GoogleService-Info.plist
        if: ${{ env.GOOGLESERVICE_PLIST_BASE64 != '' }}
        run: |
          echo "${{ env.GOOGLESERVICE_PLIST_BASE64 }}" | base64 --decode > ios/JARS/GoogleService-Info.plist
          echo "‚úÖ GoogleService-Info.plist written"

      - name: Verify vendored Stripe exists
        run: |
          test -d ios/Vendor/Stripe || { echo '‚ùå ios/Vendor/Stripe missing. Run "Vendor Stripe Pods" workflow on this branch first.'; exit 1; }

      - name: Install CocoaPods
        run: |
          set -euo pipefail
          sudo gem install cocoapods --no-document
          pod --version

      - name: Install CocoaPods (offline-friendly with vendored Stripe)
        run: |
          set -euo pipefail
          cd ios
          test -d Vendor/Stripe || { echo '‚ùå Stripe vendor folder missing. Run Vendor Stripe Pods workflow on this branch.'; exit 1; }

          pod deintegrate || true

          attempt_pod_install () {
            pod install --repo-update && return 0
            return 1
          }

          if ! attempt_pod_install; then
            echo 'pod install failed, retrying in 10s...'
            sleep 10
            if ! attempt_pod_install; then
              echo 'pod install failed again, retrying in 30s...'
              sleep 30
              attempt_pod_install
            fi
          fi

      - name: Build iOS simulator .app via xcodebuild
        run: |
          set -euo pipefail
          cd ios
          xcodebuild \
            -workspace JARS.xcworkspace \
            -scheme JARS \
            -sdk iphonesimulator \
            -configuration Release \
            -derivedDataPath build

      - name: Package simulator app
        run: |
          set -euo pipefail
          cd ios/build/Build/Products/Release-iphonesimulator
          APP_NAME=$(ls -d *.app | head -n 1)
          zip -r "$APP_NAME.zip" "$APP_NAME"
          mv "$APP_NAME.zip" ../../../JARS-simulator.zip

      - name: Upload iOS Simulator artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-simulator-build
          path: ios/build/JARS-simulator.zip
          if-no-files-found: error

      - name: (Info) Skipping Appetize ‚Äî token missing or PR is from a fork
        if: ${{ (env.APPETIZE_API_TOKEN == '') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}
        run: |
          echo "Skipping Appetize upload."
          echo "### Appetize ‚Äî Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Reason: secrets not available or forked PR." >> $GITHUB_STEP_SUMMARY
          echo "- iOS Simulator artifact uploaded as 'ios-simulator-build'." >> $GITHUB_STEP_SUMMARY

      - name: Upload iOS build to Appetize
        if: ${{ (env.APPETIZE_API_TOKEN != '') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        id: appetize
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
          PUBLIC_FLAG="${APPETIZE_PUBLIC:-false}"
          RESP_JSON=$(curl -sS -X POST https://api.appetize.io/v2/apps \
            -H "Authorization: Bearer ${APPETIZE_API_TOKEN}" \
            -H "Content-Type: multipart/form-data" \
            -F "platform=ios" \
            -F "file=@ios-simulator.tar.gz" \
            -F "note=Jars iOS Simulator build ${GITHUB_SHA}" \
            -F "public=${PUBLIC_FLAG}")
          echo "${RESP_JSON}" > appetize_response.json
          PUBLIC_KEY=$(echo "$RESP_JSON" | jq -r '.publicKey // empty')
          DASH_URL=$(echo "$RESP_JSON" | jq -r '.dashboardUrl // .publicURL // .appURL // empty')
          if [ -n "$PUBLIC_KEY" ]; then
            APP_URL="https://appetize.io/app/${PUBLIC_KEY}"
          elif [ -n "$DASH_URL" ]; then
            APP_URL="$DASH_URL"
          else
            APP_URL=""
          fi
          echo "url=${APP_URL}" >> $GITHUB_OUTPUT

      - name: Upload Appetize API response (artifact)
        if: steps.appetize.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: appetize-response
          path: appetize_response.json

      - name: Summarize Appetize upload
        if: steps.appetize.outcome == 'success'
        run: |
          echo "### Appetize ‚Äî iOS Simulator" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.appetize.outputs.url }}" ]; then
            echo "- Launch: ${{ steps.appetize.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Upload succeeded. See 'appetize-response' artifact for details and shareable link." >> $GITHUB_STEP_SUMMARY

  post-summary:
    needs: [build-android-preview, build-ios-simulator]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false }}
    steps:
      - name: Post preview links as PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### üöÄ JARS Mobile Preview Build Ready
            **Artifacts**
            - [Android APK](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [iOS Simulator tar.gz](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Live Testing**
            - Appetize iOS Simulator: ${{ needs.build-ios-simulator.outputs.appetize_url || 'N/A' }}
            - Firebase Test Lab Results: ${{ needs.build-android-preview.outputs.ftl_url || 'N/A' }}
            *(automatically generated by CI)*
