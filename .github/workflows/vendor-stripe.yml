name: Vendor Stripe Pods

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to vendor Stripe into (will push commits to this branch)'
        required: true
        default: 'chore/ios-lockdown'

jobs:
  vendor-stripe:
    runs-on: macos-latest

    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch }}
          fetch-depth: 0

      - name: Set up Ruby / CocoaPods
        run: |
          set -euo pipefail
          sudo gem install cocoapods --no-document
          pod --version

      - name: Enable Corepack / Yarn 3 / install JS deps
        run: |
          set -euo pipefail
          corepack enable || true
          corepack prepare yarn@3.6.1 --activate || true
          node --version || true
          yarn --version || true
          yarn install --immutable

      # 1. Online pod install: this pulls Stripe from GitHub into ios/Pods/*
      - name: Online pod install to fetch Stripe
        run: |
          set -euo pipefail
          cd ios
          pod install --repo-update

      - name: Vendor Stripe pods (source dirs + podspecs) into ios/Vendor/Stripe
        run: |
          set -euo pipefail
          cd ios

          mkdir -p Vendor/Stripe

          echo ">>> Copy Stripe source folders from Pods/"
          for PODDIR in Pods/Stripe*; do
            [ -d "$PODDIR" ] || continue
            PODNAME=$(basename "$PODDIR")
            echo "Vendoring $PODNAME from $PODDIR"
            mkdir -p "Vendor/Stripe/$PODNAME"
            cp -R "$PODDIR/"* "Vendor/Stripe/$PODNAME"/ || true
          done

          echo ">>> Copy Stripe podspecs from any known CocoaPods locations"
          # Strategy:
          # - Look in Pods/<PodName>/<PodName>.podspec*
          # - Look in Pods/Local Podspecs/Stripe*.podspec*
          # - Look in Pods/Target Support Files/<PodName>/<PodName>.podspec*
          # For each podspec we find, drop it in Vendor/Stripe/<PodName>/<PodName>.podspec(.json)

          # helper: copy_spec <specpath> <podname>
          copy_spec () {
            local SPECFILE="$1"
            local PODNAME="$2"
            if [ -f "$SPECFILE" ]; then
              echo "  attaching podspec $SPECFILE -> Vendor/Stripe/$PODNAME/"
              mkdir -p "Vendor/Stripe/$PODNAME"
              BASENAME="$(basename "$SPECFILE")"
              cp "$SPECFILE" "Vendor/Stripe/$PODNAME/$BASENAME"
            fi
          }

          # Pass 1: direct pod folders
          for PODDIR in Pods/Stripe*; do
            [ -d "$PODDIR" ] || continue
            PODNAME=$(basename "$PODDIR")
            copy_spec "$PODDIR/$PODNAME.podspec" "$PODNAME"
            copy_spec "$PODDIR/$PODNAME.podspec.json" "$PODNAME"
          done

          # Pass 2: Local Podspecs (CocoaPods sometimes caches specs here)
          if [ -d "Pods/Local Podspecs" ]; then
            for SPECFILE in Pods/Local\ Podspecs/Stripe*.podspec Pods/Local\ Podspecs/Stripe*.podspec.json; do
              [ -f "$SPECFILE" ] || continue
              # Extract 'StripeFoo' from '.../StripeFoo.podspec...'
              PODNAME=$(basename "$SPECFILE")
              PODNAME=${PODNAME%%.podspec*}
              PODNAME=${PODNAME%%.podspec.json*}
              copy_spec "$SPECFILE" "$PODNAME"
            done
          fi

          # Pass 3: Target Support Files (used per-pod)
          if [ -d "Pods/Target Support Files" ]; then
            for SUPPORTDIR in Pods/Target\ Support\ Files/Stripe* Pods/Target\ Support\ Files/Stripe*/*; do
              [ -d "$SUPPORTDIR" ] || continue
              # SUPPORTDIR might be Pods/Target Support Files/StripePayments or its subdir
              PODBASE=$(basename "$SUPPORTDIR")
              # Look for *.podspec or *.podspec.json inside
              for SPECFILE in "$SUPPORTDIR"/*.podspec "$SUPPORTDIR"/*.podspec.json; do
                [ -f "$SPECFILE" ] || continue
                # Derive podname from file name, e.g. StripePayments.podspec.json -> StripePayments
                PODNAME=$(basename "$SPECFILE")
                PODNAME=${PODNAME%%.podspec*}
                PODNAME=${PODNAME%%.podspec.json*}
                copy_spec "$SPECFILE" "$PODNAME"
              done
            done
          fi

          echo ">>> After vendoring, list Vendor/Stripe contents recursively:"
          find Vendor/Stripe -maxdepth 2 -type f -print

      - name: Patch Podfile to use vendored Stripe pods
        run: |
          set -euo pipefail
          cd ios
          PODFILE="Podfile"

          # comment out any Stripe lines that declare remote pods to avoid conflicts
          sed -i.bak -E 's/^([[:space:]]*pod[[:space:]]+\"Stripe[A-Za-z0-9]*\".*)$/# \1/g' "$PODFILE"

          # inject vendored block before post_install (if not already present)
          if ! grep -q 'Vendor/Stripe/StripeFinancialConnections' "$PODFILE"; then
            awk '
              /post_install do/ && !done {
                print "  # BEGIN vendored Stripe pods (offline, committed)"
                print "  pod \\\"Stripe\\\",                    :path => \\\"Vendor/Stripe/Stripe\\\""
                print "  pod \\\"StripeCore\\\",                :path => \\\"Vendor/Stripe/StripeCore\\\""
                print "  pod \\\"StripeUICore\\\",              :path => \\\"Vendor/Stripe/StripeUICore\\\""
                print "  pod \\\"StripeApplePay\\\",            :path => \\\"Vendor/Stripe/StripeApplePay\\\""
                print "  pod \\\"StripePayments\\\",            :path => \\\"Vendor/Stripe/StripePayments\\\""
                print "  pod \\\"StripePaymentsUI\\\",          :path => \\\"Vendor/Stripe/StripePaymentsUI\\\""
                print "  pod \\\"StripePaymentSheet\\\",        :path => \\\"Vendor/Stripe/StripePaymentSheet\\\""
                print "  pod \\\"StripeFinancialConnections\\\",:path => \\\"Vendor/Stripe/StripeFinancialConnections\\\""
                print "  # END vendored Stripe pods"
                done=1
              }
              { print }
            ' "$PODFILE" > "$PODFILE.tmp" && mv "$PODFILE.tmp" "$PODFILE"
          fi

          echo '=== BEGIN UPDATED Podfile ==='
          cat Podfile
          echo '=== END UPDATED Podfile ==='

      - name: Offline-style reinstall using vendored Stripe
        run: |
          set -euo pipefail
          cd ios
          pod deintegrate
          pod install

      - name: Commit vendored Stripe state
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add ios/Vendor/Stripe ios/Podfile ios/Podfile.lock
          git status

          if ! git diff --cached --quiet; then
            git commit -m "chore(ios): vendor Stripe pods (including podspecs from Local Podspecs / Target Support Files) for offline CI"
            git push origin ${{ github.event.inputs.target_branch }}
          else
            echo "No vendored changes to commit."
          fi
          
