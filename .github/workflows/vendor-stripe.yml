name: Vendor Stripe Pods

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to vendor Stripe into (will push commits to this branch)'
        required: true
        default: 'chore/ios-lockdown'

jobs:
  vendor-stripe:
    runs-on: macos-latest

    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch }}
          fetch-depth: 0

      - name: Set up Ruby / CocoaPods
        run: |
          set -euo pipefail
          sudo gem install cocoapods --no-document
          pod --version

      - name: Enable Corepack / Yarn 3 / install JS deps
        run: |
          set -euo pipefail
          corepack enable || true
          corepack prepare yarn@3.6.1 --activate || true
          node --version || true
          yarn --version || true
          yarn install --immutable

      # 1. Online pod install: this pulls Stripe from GitHub into ios/Pods/*
      - name: Online pod install to fetch Stripe
        run: |
          set -euo pipefail
          cd ios
          pod install --repo-update

      - name: Discover Stripe pods from first CocoaPods install
        id: discover_stripe
        run: |
          set -euo pipefail
          cd ios

          echo 'Listing Pods/* for Stripe* folders:'
          ls Pods | sed -n 's/^/  Pods\\//p'

          # Collect every top-level pod folder that starts with 'Stripe'
          STRIPE_PODS=$(ls Pods | grep '^Stripe' || true)

          echo 'Stripe pods detected:'
          echo "$STRIPE_PODS"

          # Save to GITHUB_OUTPUT so next steps can use it.
          {
            echo "pods_list<<EOF"
            echo "$STRIPE_PODS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Vendor Stripe pods (source + podspecs) into ios/Vendor/Stripe
        run: |
          set -euo pipefail
          cd ios

          mkdir -p Vendor/Stripe

          # Read list from previous step
          STRIPE_PODS="${{ steps.discover_stripe.outputs.pods_list }}"

          echo "Vendoring these Stripe pods:"
          echo "$STRIPE_PODS"

          copy_spec () {
            local SPECFILE="$1"
            local PODNAME="$2"
            if [ -f "$SPECFILE" ]; then
              echo "  attaching podspec $SPECFILE -> Vendor/Stripe/$PODNAME/"
              mkdir -p "Vendor/Stripe/$PODNAME"
              BASENAME="$(basename "$SPECFILE")"
              cp "$SPECFILE" "Vendor/Stripe/$PODNAME/$BASENAME"
            fi
          }

          for PODNAME in $STRIPE_PODS; do
            PODDIR="Pods/$PODNAME"
            echo "---"
            echo "Processing $PODNAME from $PODDIR"

            # copy the entire pod source folder if it exists
            if [ -d "$PODDIR" ]; then
              mkdir -p "Vendor/Stripe/$PODNAME"
              cp -R "$PODDIR/"* "Vendor/Stripe/$PODNAME"/ || true
            else
              echo "WARNING: $PODDIR not found (maybe this pod is subspec-only)"
            fi

            # try to locate a podspec for this pod in common places:
            # 1. inside the pod dir itself
            copy_spec "$PODDIR/$PODNAME.podspec" "$PODNAME"
            copy_spec "$PODDIR/$PODNAME.podspec.json" "$PODNAME"

            # 2. Local Podspecs cache
            if [ -d "Pods/Local Podspecs" ]; then
              for SPECFILE in "Pods/Local Podspecs/$PODNAME.podspec" "Pods/Local Podspecs/$PODNAME.podspec.json"; do
                copy_spec "$SPECFILE" "$PODNAME"
              done
            fi

            # 3. Target Support Files (CocoaPods sometimes mirrors podspec info here)
            if [ -d "Pods/Target Support Files/$PODNAME" ]; then
              for SPECFILE in "Pods/Target Support Files/$PODNAME/$PODNAME.podspec" "Pods/Target Support Files/$PODNAME/$PODNAME.podspec.json"; do
                copy_spec "$SPECFILE" "$PODNAME"
              done
            fi

            echo "Final contents of Vendor/Stripe/$PODNAME:"
            ls "Vendor/Stripe/$PODNAME" || true
          done

          echo 'Full Vendor/Stripe tree:'
          find Vendor/Stripe -maxdepth 2 -print

      - name: Patch Podfile to use vendored Stripe pods dynamically
        run: |
          set -euo pipefail
          cd ios

          PODFILE="Podfile"
          STRIPE_PODS="${{ steps.discover_stripe.outputs.pods_list }}"

          echo "Stripe pods to inject into Podfile:"
          echo "$STRIPE_PODS"

          # 1. Comment out any existing Stripe* pod lines (remote definitions)
          sed -i.bak -E 's/^([[:space:]]*pod[[:space:]]+\"Stripe[A-Za-z0-9]*\".*)$/# \1/g' "$PODFILE"

          # 2. Build a temp file with our vendored block
          {
            echo '  # BEGIN vendored Stripe pods (offline, committed)'
            for PODNAME in $STRIPE_PODS; do
              echo "  pod \"$PODNAME\", :path => \"Vendor/Stripe/$PODNAME\""
            done
            echo '  # END vendored Stripe pods'
          } > vendored_stripe_block.txt

          # 3. Insert vendored block right before the first 'post_install do' line,
          #    but only if we haven't already inserted it before.
          if ! grep -q 'BEGIN vendored Stripe pods' "$PODFILE"; then
            awk '
              /post_install do/ && !done {
                system("cat vendored_stripe_block.txt")
                done=1
              }
              { print }
            ' "$PODFILE" > "$PODFILE.tmp" && mv "$PODFILE.tmp" "$PODFILE"
          fi

          echo '=== BEGIN UPDATED Podfile ==='
          cat Podfile
          echo '=== END UPDATED Podfile ==='

      - name: Offline-style reinstall using vendored Stripe
        run: |
          set -euo pipefail
          cd ios

          pod deintegrate
          pod install

      - name: Commit vendored Stripe state
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add ios/Vendor/Stripe ios/Podfile ios/Podfile.lock
          git status

          if ! git diff --cached --quiet; then
            git commit -m "chore(ios): vendor Stripe pods dynamically (only existing pods) + lock Podfile for offline CI"
            git push origin ${{ github.event.inputs.target_branch }}
          else
            echo "No vendored changes to commit."
          fi
          
