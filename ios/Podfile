require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'

use_modular_headers!

install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...), which will be excluded. To fix this,
# you can also exclude `react-native-flipper` in `react-native.config.js`
#
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
#   }
# }
# ```
flipper_config = FlipperConfiguration.disabled
if ENV['NO_FLIPPER'] == '1' then
  # Explicitly disabled through environment variables
  flipper_config = FlipperConfiguration.disabled
elsif podfile_properties.key?('ios.flipper') then
  # Configure Flipper in Podfile.properties.json
  if podfile_properties['ios.flipper'] == 'true' then
    flipper_config = FlipperConfiguration.enabled(["Debug", "Release"])
  elsif podfile_properties['ios.flipper'] != 'false' then
    flipper_config = FlipperConfiguration.enabled(["Debug", "Release"], { 'Flipper' => podfile_properties['ios.flipper'] })
  end
end

target 'JARS' do
  use_expo_modules!
  config = use_native_modules!

  # Force specific Swift pods to build as dynamic frameworks so that their .modulemap
  # and Swift modules exist when the main target compiles.
  pre_install do |pi_installer|
    pi_installer.pod_targets.each do |pod|
      framework_pods = %w[
        ExpoModulesCore
        stripe-react-native
        Stripe
        StripeCore
        StripeUICore
        StripeApplePay
        StripePayments
        StripePaymentsUI
        StripePaymentSheet
        StripeFinancialConnections
        lottie-ios
        lottie-react-native
      ]

      if framework_pods.include?(pod.name)
        pod.build_type = Pod::BuildType.dynamic_framework
      end
    end
  end

  # NOTE: we are NOT manually declaring individual Firebase pods anymore.
  # Global use_modular_headers! above handles them for static Swift compat.

  

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    # Note that if you have use_frameworks! enabled, Flipper will not work if enabled
    :flipper_configuration => flipper_config
  )

  # BEGIN vendored Stripe pods (offline, committed)
  # pod 'Stripe', :path => 'Vendor/Stripe/Stripe'
  # pod 'StripeCore', :path => 'Vendor/Stripe/StripeCore'
  # pod 'StripeUICore', :path => 'Vendor/Stripe/StripeUICore'
  # pod 'StripeApplePay', :path => 'Vendor/Stripe/StripeApplePay'
  # pod 'StripePayments', :path => 'Vendor/Stripe/StripePayments'
  # pod 'StripePaymentsUI', :path => 'Vendor/Stripe/StripePaymentsUI'
  # pod 'StripePaymentSheet', :path => 'Vendor/Stripe/StripePaymentSheet'
  # pod 'StripeFinancialConnections', :path => 'Vendor/Stripe/StripeFinancialConnections'
  # END vendored Stripe pods

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  
    # --- Force modern iOS deployment target for all pods to satisfy Xcode 16 ---
    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |config|
        # Match the app/platform line at the top of the Podfile
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.1'

        # Normalize simulator arch settings on Apple Silicon runners
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      end
    end
    # --- end deployment target patch ---
 
    # Ensure HEADER_SEARCH_PATHS and MODULEMAPS are exported for vendored Stripe pods
    installer.pods_project.targets.each do |t|
      if t.name.start_with?('Stripe')
        t.build_configurations.each do |config|
          config.build_settings['DEFINES_MODULE'] = 'YES'
          config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
          config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-O'
        end
      end
    end
  end

  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
end
